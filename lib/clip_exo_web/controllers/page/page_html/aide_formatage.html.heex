<link rel="stylesheet" href="css/clip_exo.css" />
<h1>Aide au formatage</h1>
<blockquote>Cette page rassemble tous les formatages utilisable dans les exercices CLIP.</blockquote>

<h2>Stylisation des paragraphes</h2>

<p>Pour styliser un paragraphe avec des styles connus, il suffit d'utiliser l'empreinte :</p>
<pre><code>&lt;class_css>.&lt;class_css>: Le paragraphe avec les classes css.</code></pre>
<p>Les paragraphes existants sont les suivants (on peut combiner une ou plusieurs classes en les séparant par des points — et seulement des points) :</p>

<pre><code><%= 
  for duo <- @liste_classes_paragraphe do %><% {classe, description} = duo %><%= 
    String.pad_trailing(classe, 10) %> : <%= description 
  %>
  <% end 
%></code></pre>
<h4>Aperçu des paragraphes stylés</h4>

<blockquote>(ceux décrit ci-dessus)</blockquote>
<%= for duo <- @liste_classes_paragraphe do %>
  <% {classe, _description} = duo %>
  <div class={classe}><code><%= classe %>:</code>  Un paragraphe dans ce style.</div>
<% end %>

<h4>Ajout de styles personnalisés</h4>

<p>On peut ajouter n'importe quel autre style dans un fichier CSS fourni qu'on précisera dans l'entête (le front-matter) du fichier de l'exercice dans la propriété <code>css_files</code> qui attend une liste de chemin d'accès relatifs.</p>

<h3>Styles "en line"</h3>

<pre><code>
*texte en italique*     => <i>texte en italique</i>
**texte en gras**       => <b>texte en gras</b>
***gras et italique***  => <b><i>gras et italique</i></b>
__souligné__            => <u>souligné</u>
--barré--               => <del>barré</del>
--barré//remplacé--     => <del>barré</del> <ins>remplacé</ins>
</code></pre>

<h3>Mises en forme "en ligne"</h3>

<pre><code>
2^e           => 2<sup>e</sup>
1^er          => 1<sup>er</sup>
note^*        => note<sup>*</sup>
note^12       => note<sup>12</sup>
 \\n          => un retour chariot &lt;br />
 ---          => une ligne <hr />
</code></pre>

<p>En parlant de "en ligne", une ligne `---` sera remplacée par</p>

<h2>Corrections automatiques</h2>

<p>Certaines corrections sont faites automatiquements. Pour les empêcher, il suffit d'échapper le caractère à conserver, c'est-à-dire de placer une balance inverse devant : « \ ».</p>

<table>
  <thead>
    <tr>
      <th width="160">Texte initial</th>
      <th width="160">Texte corrigé</th>
      <th width="160">Pour le conserver</th>
    </tr>
  </thead>
  <tr>
    <td>un "mot"</td>
    <td>un « mot »</td>
    <td>un \"mot\"</td>
  </tr>
  <tr>
    <td>J'ai dit</td>
    <td>J’ai dit</td>
    <td>J\'ai dit</td>
  </tr>
</table>



<h2>Le document « formateur »</h2>

<p>Dans un texte, on peut ajouter avec le style particulier « admin » des textes qui ne seront visibles que par le formateur.</p>

<p>Dès que le programme rencontre ce style, il note qu'il lui faudra aussi produire le document pour le formateur (`&lt;nom exercice>-formateur.html`).</p>

<p>Noter que ce document est aussi produit quand le document contient un QCM.</p>



<h2>Les types de conteneur</h2>

<h3>LISTE D'ÉTAPES</h3>

<i>Les « liste d'étapes » est une liste numérotée.</i>

<pre><code>:etapes
: Première étape
: Deuxième étape
etc.

# -- Résultat --
:=> Cette ligne ne sera pas chiffrée, elle affichera un résultat

# -- Étapes avec picto devant --
:souris   Étape avec la souris
:clavier  Étape avec le clavier
:cle      Étape pour une sauvegarde sur clé USB.
:mesure   Étape où il faut faire une mesure
:clic     Étape où il faut cliquer quelque part
:menu     Étape où il faut choisir un menu
:repete   Une répétition à faire
:coche    Une case à cocher pour continuer
:radio    Un bouton radio à choisir pour continuer.
</code></pre>


<h3>BLOC DE CODE</h3>

<pre><code>:blockcode
: Première ligne de code
: Deuxième ligne de code
etc.
:+ Ligne de code à marquer "ajouté" (signe "+")
</code></pre>

<h3>TABLE</h3>

<pre><code>:table
::cols_width(c1, c2..., cN)
  Largeur des colonnes. Une valeur "_" s'adaptera à ce qui reste
  S'il y en a une seule, toutes les colonnes auront cette largeur
::cols_align(c1, c2..., cN)
::cols_pad(c1, c2..., cN)     
::cols_class(c1, c2..., cN)
::cols_libelle(c1, c2..., cN)
: Première cellule, Deuxième cellule, ..., Cellule N
: Cellule avec \, une virgule, la bonne deuxième, ..., Cellule N
: css:Cellule stylisée, ..., Cellule N

    Laisser toujours une ligne vide après les blocs
</code></pre>

<h3>Q.C.M</h3>

<em>Un bloc pour les QCM, les Questionnaires à choix multiples.</em>

<pre><code>:qcm
::permettre_ne_sait_pas  # ajoute le choix "Je ne sais pas" (1 point)
:qc Une première question, avec des choix multiple (cases à cocher)
:r Une réponse comme case à cocher
:r Une autre réponse comme case à cocher
etc.
:
:qr Une deuxième question avec un choix unique (bouton radio)
:r0 Une première réponse
:r5 Une autre réponse (la bonne, à 5)
etc.
:
:qc Troisième question, en donnant la valeur de points des réponses
:r0 C'est une mauvaise réponse
:r1 C'est une réponse à 1 point
:r4 C'est une réponse à 4 points
etc.
:
:qr Quatrième question avec des réponses pointées
:r0 Pas de point pour ce choix
:r5 5 point pour celui qui choisit ce bouton
:r2  Entre les deux eaux.
</code></pre>

<p>Noter que :</p>

<ul>
  <li>les questions sont séparées par des lignes vides avec ":" (rappel : une ligne vraiment vide met fin au conteneur),</li>
  <li>les réponses commencent toujours par "r" qui est toujours suivi par le nombre de points,</li>
  <li>le nombre de points doit impérativement être entre 0 et 9</li>
  <li>Justesse des réponses : <ul>
    <li>une réponse à 0 est fausse</li>
    <li>de 1 à 5, une réponse est de plus en plus juste</li>
    <li>une réponse est considérée comme parfaitement juste à partir de 5</li>
    <li>à partir de 5, la réponse est tout à fait juste</li>
  </ul>
  </li>
  <li>l'option <code>permettre_ne_sait_pas</code> permet d'ajouter automatiquement une case ou un bouton radio « Je ne sais pas » à toutes les questions.</li>
  <li>les "q" et "r" désignant les questions et réponses sont obligatoirement en minuscules</li>
</ul>